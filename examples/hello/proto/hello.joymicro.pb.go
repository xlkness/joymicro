// Code generated by protoc-gen-joymicro. DO NOT EDIT.
// source: hello.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "joynova.com/joynova/joymicro/client"
	server "joynova.com/joynova/joymicro/service"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

var serviceName = "Hello"

// Client API for Hello service

// HelloService Hello服务客户端接口
type HelloService interface {
	Hello(ctx context.Context, in *Request) (*Response, error)
}

// helloService Hello服务客户端
type helloService struct {
	c    *client.Service
	name string
}

// NewHelloService 创建HelloService客户端
func NewHelloService(etcdAddrs []string, timeout time.Duration, isPermanent bool) HelloService {
	c := client.New(serviceName, etcdAddrs, timeout, isPermanent)
	return &helloService{
		c:    c,
		name: "Hello",
	}
}

func (c *helloService) Hello(ctx context.Context, in *Request) (*Response, error) {
	out := new(Response)
	err := c.c.Call(ctx, "Hello", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hello service

// HelloHandler 服务回调接口，服务提供方实现并注册
type HelloHandler interface {
	Hello(context.Context, *Request, *Response) error
}

// RegisterHelloHandler 注册服务，调用方需提前创建服务器并注册服务回调
func RegisterHelloHandler(s *server.ServicesManager, hdlr HelloHandler) error {
	err := s.RegisterOneService(serviceName, hdlr, nil)
	return err
}
