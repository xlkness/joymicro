// Code generated by protoc-gen-joymicro. DO NOT EDIT.
// source: api.desc/shop.proto

package proto1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	"encoding/json"
	client "joynova.com/joynova/joymicro/client"
	server "joynova.com/joynova/joymicro/service"
	"reflect"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

var serviceName = "shop"

type ShopServiceInterface interface {
	Buy(context.Context, *Request) (*Response, error)
	BuyPeer(context.Context, string, *Request) (*Response, error)
	BuyAll(context.Context, *Request) (*Response, error)
}

func NewShopService(etcdAddrs []string, timeout time.Duration, isPermanent bool) ShopServiceInterface {
	c := client.New(serviceName, etcdAddrs, timeout, isPermanent)
	// 设置点对点选择器
	c.SetSelector(&client.PeerSelector{})
	return &shopService{
		c: c,
	}
}

type shopService struct {
	c *client.Service
}

func (c *shopService) Buy(ctx context.Context, in *Request) (*Response, error) {
	out := new(Response)
	err := c.c.Call(ctx, "Buy", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopService) BuyPeer(ctx context.Context, peerKey string, in *Request) (*Response, error) {
	out := new(Response)
	ctx = context.WithValue(ctx, "select_key", peerKey)
	err := c.c.Call(ctx, "Buy", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopService) BuyAll(ctx context.Context, in *Request) (*Response, error) {
	out := new(Response)
	err := c.c.CallAll(ctx, "Buy", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type ShopHandlerInterface interface {
	Buy(context.Context, *Request, *Response) error
}

func RegisterShopHandler(s *server.ServicesManager, hdlr ShopHandlerInterface) error {
	return s.RegisterOneService(serviceName, hdlr)
}

//===============================================Json Handler for Test===============================================

func NewShopJsonTestService(etcdAddrs []string, timeout time.Duration, isPermanent bool) reflect.Type {
	c := NewShopService(etcdAddrs, timeout, isPermanent)
	return reflect.TypeOf(&ShopJsonTestService{c: c})
}

type ShopJsonTestService struct {
	c ShopServiceInterface
}

func (c *ShopJsonTestService) Buy(ctx context.Context, in string) (*Response, error) {
	newIn := &Request{}
	err := json.Unmarshal([]byte(in), newIn)
	if err != nil {
		return nil, err
	}

	return c.c.Buy(ctx, newIn)
}

func (c *ShopJsonTestService) BuyPeer(ctx context.Context, peerKey string, in string) (*Response, error) {
	newIn := &Request{}
	err := json.Unmarshal([]byte(in), newIn)
	if err != nil {
		return nil, err
	}

	return c.c.BuyPeer(ctx, peerKey, newIn)
}

func (c *ShopJsonTestService) BuyAll(ctx context.Context, in string) (*Response, error) {
	newIn := &Request{}
	err := json.Unmarshal([]byte(in), newIn)
	if err != nil {
		return nil, err
	}

	return c.c.BuyAll(ctx, newIn)
}
