// Code generated by protoc-gen-joymicro. DO NOT EDIT.
// source: api.desc/shop.proto

package proto1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "joynova.com/joynova/joymicro/client"
	server "joynova.com/joynova/joymicro/service"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

var serviceName = "Shop"

// Client API for Shop service

// ShopService Shop服务客户端接口
type ShopService interface {
	// 打开点对点
	Buy(ctx context.Context, in *Request) (*Response, error)
	BuyAll(ctx context.Context, in *Request) (*Response, error)
	BuyPeer(ctx context.Context, peerKey string, in *Request) (*Response, error)
}

// shopService Shop服务客户端
type shopService struct {
	c    *client.Service
	name string
}

// NewShopService 创建ShopService客户端
func NewShopService(etcdAddrs []string, timeout time.Duration, isPermanent bool) ShopService {
	c := client.New(serviceName, etcdAddrs, timeout, isPermanent)
	return &shopService{
		c:    c,
		name: "Shop",
	}
}

func (c *shopService) Buy(ctx context.Context, in *Request) (*Response, error) {
	out := new(Response)
	err := c.c.Call(ctx, "Buy", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopService) BuyAll(ctx context.Context, in *Request) (*Response, error) {
	out := new(Response)
	err := c.c.CallAll(ctx, "Buy", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopService) BuyPeer(ctx context.Context, peerKey string, in *Request) (*Response, error) {
	out := new(Response)
	err := c.c.CallPeer(ctx, peerKey, "Buy", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Shop service

// ShopHandler 服务回调接口，服务提供方实现并注册
type ShopHandler interface {
	// 打开点对点
	Buy(context.Context, *Request, *Response) error
}

// RegisterShopHandler 注册服务，调用方需提前创建服务器并注册服务回调
func RegisterShopHandler(s *server.ServicesManager, hdlr ShopHandler, peerInfo *server.Peer2Peer) error {
	err := s.RegisterOneService(serviceName, hdlr, peerInfo)
	return err
}
